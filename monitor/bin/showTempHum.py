#!/usr/bin/python3
# showTempHum.py

# A Qt6 script to show the studio's temperature and humidity
#
# Very simple GUI - see below.
#
# +--------------------------------------------------------------------------+
# | +----------------------------------------------------------------------+ |
# | |                                                                      | |
# | |                                                                      | |
# | |                                                                      | |
# | |                                                                      | |
# | |                         Graph area                                   | |
# | |                                                                      | |
# | |                                                                      | |
# | |                                                                      | |
# | |                                                                      | |
# | |                                                                      | |
# | +----------------------------------------------------------------------+ |
# |                                                                +------+  |
# |                                                                | EXIT |  |
# |                                                                +------+  |
# +--------------------------------------------------------------------------+
#
# The image is generated by the createtemphumimage.py script - it uses the
# same configuration file as this script. If the image file timestamp changes
# the new image is loaded.
#

# -----------------------------------------------------------------------------
# Ver: 1.0
# Author: Louis Marais
# Start: 2025-04-21
# Last: 2025-04-26
#
# -----------------------------------------------------------------------------
# Version: {Next}
# Author:
# Start date:
# Last modifications:
#
# Modifications:
# ~~~~~~~~~~~~~~
# 1.
#
# -----------------------------------------------------------------------------

from PyQt6.QtWidgets import (
	QApplication,
	QVBoxLayout,
	QWidget,
	QLabel,
	QPushButton,
	QGridLayout,
	QMainWindow,
	QMessageBox,
)
from PyQt6.QtGui import (
	QIcon,
	QPixmap,
	QCursor,
)

from PyQt6.QtCore import (
	Qt,
	QTimer,
)

import sys
import os
import time
import argparse
import configparser

sep = os.sep
HOME = os.path.expanduser('~')
if not HOME.endswith(sep):
	HOME += sep

etcpath = f"{HOME}etc{sep}"

script = os.path.basename(__file__)
VERSION = "1.0"
AUTHORS = "Louis Marais"

DEBUG = False

# -----------------------------------------------------------------------------
# Subroutines
# -----------------------------------------------------------------------------

# -----------------------------------------------------------------------------
def ts():
	return(time.strftime('%Y-%m-%d %H:%M:%S ',time.gmtime()))

# -----------------------------------------------------------------------------
def debug(msg):
	if DEBUG:
		print(ts(),msg)
	return

# -----------------------------------------------------------------------------
def errorExit(s):
	print('ERROR: '+s)
	sys.exit(1)

# -----------------------------------------------------------------------------
# Class definition
# -----------------------------------------------------------------------------

# -----------------------------------------------------------------------------
class Window(QMainWindow):
	def __init__(self):
		super().__init__()

		self.setWindowTitle("Set2Yoga Temperature and Humidity monitor")
		self.setWindowIcon(QIcon("logo.png"))

		self.generalLayout = QVBoxLayout()

		centralWidget = QWidget(self)
		centralWidget.setLayout(self.generalLayout)

		self.setCentralWidget(centralWidget)

		self.timer = QTimer(self)
		self.timer.timeout.connect(self.update_image)
		self.timer.start(5000) # Check every 5 seconds

		self.imgpath = ""
		self.imgfiletime = 0
		self.oldimgfiletime = 0

		self._createDisplay()

		self.loadSettings()

		self.update_image()

# -----------------------------------------------------------------------------
	def update_image(self):
		global DEBUG
		if not os.path.isfile(self.imgpath):
			debug("Image file does not (yet?) exist.")
			return
		self.imgfiletime = os.path.getmtime(self.imgpath)
		if self.imgfiletime == self.oldimgfiletime:
			debug("Image file time has not changed.")
			return
		if not self.isFullScreen():
			self.showFullScreen()
		pic = QPixmap(self.imgpath)
		self.lblImage.setPixmap(pic)
		self.oldimgfiletime = self.imgfiletime
		debug("Image file has been updated since we last checked")
		return

# -----------------------------------------------------------------------------
	def loadSettings(self):
		global DEBUG

		parser = argparse.ArgumentParser(description="Show studio "+
												"temperature and humidity.")
		parser.add_argument("-v","--version",action="store_true",help="Show "+
												"version and exit.")
		parser.add_argument("-c","--config",nargs=1,help="Specify alternative "+
												"configuration file. The default is "+
												f"{etcpath}showtemphum.conf.")
		parser.add_argument("-d","--debug",action="store_true",
												help="Turn debugging on")
		args = parser.parse_args()

		if args.debug:
			DEBUG = True

		versionStr = script+" version "+VERSION+" written by "+AUTHORS

		if args.version:
			print(versionStr)
			sys.exit(0)

		debug(versionStr)
		self.configfile = f"{etcpath}showtemphum.conf"

		if args.config:
			debug(f"Alternate config file specified: {str(args.config[0])}")
			self.configfile = str(args.config[0])
			if not self.configfile.startswith(sep): #won't work in Windows...
				self.configfile = HOME+self.configfile

		debug(f"Configuration file: {self.configfile}")

		if args.version:
			print(versionStr)
			sys.exit(0)

		debug(versionStr)

		if not os.path.isfile(self.configfile):
			dlg = QMessageBox(self)
			dlg.setWindowTitle("Configuration file")
			dlg.setText("Configuration file does NOT exist!\n\n"+
									f"Specified file: {self.configfile}\n\n"+
									"Create a configuration file and try again. " +
									"You'll need to exit the application and relaunch it!")
			dlg.setStandardButtons(QMessageBox.StandardButton.Ok)
			dlg.exec()
			return

		conf = configparser.ConfigParser()
		conf.read(self.configfile)

		if conf.has_option('paths','image'):
			flnm = conf['paths']['image']
			if not flnm.startswith(sep): #won't work in Windows...
				flnm = HOME+flnm
			self.imgpath = flnm
			debug(f"Configured image file {flnm}")
		else:
			errorExit("The configuration file does not have a required option.\n"+
						 "       It needs a ['paths']['image'] option.")

# -----------------------------------------------------------------------------
	def _createDisplay(self):

		layoutTop = QGridLayout()
		layoutBot = QGridLayout()

		self.lblImage = QLabel(" ",alignment=Qt.AlignmentFlag.AlignCenter)
		self.btnExit = QPushButton("Exit")
		self.btnExit.clicked.connect(self.Exit_clicked)
		self.lblBotLeft = QLabel(" ",alignment=Qt.AlignmentFlag.AlignCenter)

		layoutTop.addWidget(self.lblImage,0,0)

		# A bunch of spaces, then the exit button
		layoutBot.addWidget(self.lblBotLeft,1,0)
		layoutBot.addWidget(self.lblBotLeft,1,1)
		layoutBot.addWidget(self.lblBotLeft,1,2)
		layoutBot.addWidget(self.lblBotLeft,1,3)
		layoutBot.addWidget(self.lblBotLeft,1,4)
		layoutBot.addWidget(self.btnExit,1,5)

		self.generalLayout.addLayout(layoutTop)
		self.generalLayout.addLayout(layoutBot)

		self.showFullScreen()

# -----------------------------------------------------------------------------
	def closeEvent(self,event):
		global DEBUG
		debug("Closing {}".format(script))

# -----------------------------------------------------------------------------
	def Exit_clicked(self):
		debug("Exit button clicked")
		self.close()
		return

# -----------------------------------------------------------------------------
# Main
# -----------------------------------------------------------------------------

def main():
	app = QApplication(sys.argv)

	# Could not hide the touch screen cursor - must be a global override...
	# And for non-touch this i s a pain, because you cannot locate the Exit button!
	#QApplication.setOverrideCursor(QCursor(Qt.CursorShape.BlankCursor))

	window = Window()

	window.show()

	sys.exit(app.exec())

if __name__ == "__main__":
	main()
